name: Build ARM64 Fedora bootc for Raspberry Pi 5

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: quay.io
  IMAGE_NAME: tempest-concorde/fedora-bootc-rpi5

jobs:
  build-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-images:
    needs: build-container
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        image-type: [iso, raw]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y podman golang-go
        go install github.com/hairyhenderson/gomplate/v3/cmd/gomplate@latest

    - name: Create SSH key file
      run: |
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ssh_key.pub
        chmod 600 ssh_key.pub

    - name: Create Docker auth file
      run: |
        echo "${{ secrets.DOCKER_AUTH_JSON }}" > docker-auth.json

    - name: Set environment variables
      run: |
        echo "SSH_KEY_PATH=$(pwd)/ssh_key.pub" >> $GITHUB_ENV
        echo "DOCKER_AUTH_PATH=$(pwd)/docker-auth.json" >> $GITHUB_ENV
        echo "TAILSCALE_AUTH_KEY=${{ secrets.TAILSCALE_AUTH_KEY }}" >> $GITHUB_ENV
        echo "WIFI_SSID_1=${{ secrets.WIFI_SSID_1 }}" >> $GITHUB_ENV
        echo "WIFI_PSK_1=${{ secrets.WIFI_PSK_1 }}" >> $GITHUB_ENV
        echo "WIFI_SSID_2=${{ secrets.WIFI_SSID_2 }}" >> $GITHUB_ENV
        echo "WIFI_PSK_2=${{ secrets.WIFI_PSK_2 }}" >> $GITHUB_ENV
        echo "TAILSCALE_ENABLE_ROUTING=${{ secrets.TAILSCALE_ENABLE_ROUTING || 'false' }}" >> $GITHUB_ENV

    - name: Generate config.toml
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        gomplate -f config.toml.tmpl -o config.toml

    - name: Set image name
      run: |
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        else
          TAG=latest
        fi
        echo "FULL_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG" >> $GITHUB_ENV

    - name: Build ${{ matrix.image-type }} image
      run: |
        mkdir -p output
        sudo podman pull ${{ env.FULL_IMAGE }}
        sudo podman pull quay.io/centos-bootc/bootc-image-builder:latest
        sudo podman run \
          --rm \
          --privileged \
          --pull=newer \
          --security-opt label=type:unconfined_t \
          -v $(pwd)/config.toml:/config.toml:ro \
          -v $(pwd)/output:/output \
          -v /var/lib/containers/storage:/var/lib/containers/storage \
          quay.io/centos-bootc/bootc-image-builder:latest \
          --type ${{ matrix.image-type }} \
          ${{ env.FULL_IMAGE }}

    - name: Upload ${{ matrix.image-type }} artifact
      uses: actions/upload-artifact@v4
      with:
        name: rpi5-${{ matrix.image-type }}-image
        path: output/
        retention-days: 30

    - name: Create release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: output/*
        draft: false
        prerelease: false
        generate_release_notes: true

  test-container:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: false
        tags: fedora-bootc-rpi5:test
        cache-from: type=gha

    - name: Test container lint
      run: |
        docker run --rm --platform=linux/arm64 fedora-bootc-rpi5:test bootc container lint
